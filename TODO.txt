main
- [ ] Criar função para gerar um grafo a partir de uma dfs/bfs (Usar na opção Z)

Nó/Grafo
- [ ] Tratar o dado do nó como o novo id (usamos o dado quando quisermos fazer referẽncia a um nó agora)
Obs: Não alterar gets e sets atuais (não sabemos como isso pode influenciar no comportamento interno de algumas funções), criar novas funções auxiliares para obter Nó por dado, e só adaptar a entrada e saída das demais funções do grafo para se referir ao nó pelo dado.

Grafo::lerArquivo()
- [x] Limpar o grafo antes de inserir os novos nós
- [ ] Permitir que a leitura crie um grafo não direcionado
    - [ ] Oferecer opção no menu para ser um grafo não direcionado

Grafo::salvarArquivo()
- [ ] 'grafAux' não possui valor caso o grafo seja direcionado

Grafo::criarNo()
- [x] ID do nó deve ser gerado automaticamente com base em quantos nós o grafo já possui

Grafo::criarAdj()
- [x] Retornar booleano dizendo se conseguiu criar adjacencia ao inves de imprimir uma mensagem
    - [ ] Escrever mensagem de erro nos codigos que utilizam essa função

Grafo::informaGrauNo()
- [ ] Retornar inteiro com o grau do nó ao inves de imprimir uma mensagem

Grafo::imprimeNos() -> imprimeGrafo()
- [x] Não precisa usar recursividade

Grafo::getNoPorId()
- [ ] Não precisa usar recursividade

Grafo::informaOrdem()
- [ ] As mensagens podem ser escritas diretas no menu

Grafo::informaTrivial()
- [ ] As mensagens podem ser escritas diretas no menu
- [ ] Retornar booleano dizendo se é um grafo trivial

Grafo::informaNulo()
- [ ] As mensagens podem ser escritas diretas no menu
- [ ] Retornar booleano dizendo se é um grafo nulo

Grafo::apresentaSequenciaGraus()
- [ ] As mensagens podem ser escritas diretas no menu
- [ ] Retornar lista de inteiros com a sequencia de graus
- [ ] Criar função para imprimir uma lista de inteiros

Grafo::verificaRegularidade()
- [x] As mensagens podem ser escritas diretas no menu
- [x] Retornar booleano dizendo se é um grafo k-regular

Grafo::informaGrau() -- função removida
- [x] As mensagens podem ser escritas diretas no menu

Grafo::ordenaSequencia()
- [ ] Não precisa ser um metodo da classe grafo

Grafo::imprimeSubInduzido()
- [x] Gerar um outro grafo ao inves de imprimir
- [x] É necessario usar std::vector? -> Favor manter isso para que a minha função que retorna fechos transitivos faça sentido

Grafo::vizinhancaAberta()
- [x] Gerar um outro grafo ao inves de imprimir
- [x] É necessario usar std::vector?

Grafo::vizinhancaFechada()
- [x] Gerar um outro grafo ao inves de imprimir
- [x] É necessario usar std::vector?

No
- [x] Alterar grauEntrada mesmo para grafos não direcionados (grau de entrada igual ao grau de saida)
Coloquei o getGrau do grafo como entrada + saída (a sequẽncia de graus de um direcionado precisa retornar essa soma né?)
O grauEntrada deve então permanecer 0 nos grafos não direcionados para a função funcionar com os dois tipos de grafos

No::removerAdj()
- [x] Precisa receber peso como parametro? -> precisa para identificar a adjacencia em multigrafos
    - [x] O mesmo vale para Grafo::removerAdj()

Teste
- [ ] Implementar teste da letra R
